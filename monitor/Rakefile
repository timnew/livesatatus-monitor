require 'socket'
require 'pry'
require './lib/livestatus_monitor'
require 'serialport'
require 'colorist'

module IRIndicator
	def process_data(traffic)
		command = case traffic
		when 0..69
			0xFF10EF # Green
		when 70..89
			0xFFB04F # Organge
		when 90..100
			0xFF906F # Red
		end

		write "IR+NEC="
		write [command, 32].pack('L<S<')
		write "\n"				
	end
end

module LedIndicator
	def process_data(traffic)
		color = case traffic
			when 0..69
				'lime'.to_color
			when 70..89
				'blue'.to_color
			when 89..100
				'red'.to_color
			end

		write "LED+RGB=#{color.r},#{color.g},#{color.b}\n"		
	end
end


def run(port, options)
	options.symbolize_keys!

	#'/dev/cu.usbserial-A9SZBD1X'
	port_file = "/dev/#{port}"
	port = SerialPort.new port_file, baud_rate: 9600, data_bits: 8, stop_bits: 1, parity: SerialPort::NONE

	while(res = port.gets.strip)
		puts res
		break if res == 'LED:Ready'		
	end

	port.write "BOARD+VERSION?\n"
	version = port.gets.match(/BOARD\+VERSION:(?<version>.*)/)[:version].strip

	case version 
	when 'LED,1'
		puts "LED BOARD"
		port.extend LedIndicator
	when  'IR,1'
		puts "IR BOARD"
		port.extend IRIndicator
	else
		raise "ERROR: Invalid Board:#{version}"
	end

	request = Request
	  .get('services')
	  .filter("host_name = #{options[:host]}")
	  .filter("description = #{options[:service]}")
	  .column(%w{host_name description state perf_data})
	  .column_headers(true)
	  .output_format(:json)


	while(true) do
		socket = TCPSocket.new options[:ip], 8060

		response = request.submit_and_parse(socket).first

		puts response.performance
		
		port.process_data  response.performance[:in_percentage]

		puts port.gets
				
		sleep(2)
	end
end


task :staging, :port do | _, args| 
	args.with_defaults port: 'ttyUSB0'
	run args.port, host: 'TW-BJ-ASA', service: 'check_snmp_asa_traffic_bps_with_error', ip: '10.18.9.4'
end

task :production, :port do | _, args| 
	args.with_defaults port: 'ttyUSB0'
	run args.port, host: 'PEK_FW_1', service: 'check_asa_traffic_outside2', ip: '10.18.9.5'
end



